package com.ludicamente.Ludicamente.service.impl;

import com.ludicamente.Ludicamente.dto.BitacoraDto;
import com.ludicamente.Ludicamente.dto.Ni√±oDto;
import com.ludicamente.Ludicamente.model.Acudiente;
import com.ludicamente.Ludicamente.model.Bitacora;
import com.ludicamente.Ludicamente.model.Ni√±o;
import com.ludicamente.Ludicamente.repository.AcudienteRepository;
import com.ludicamente.Ludicamente.repository.BitacoraRepository;
import com.ludicamente.Ludicamente.repository.Ni√±oRepository;
import com.ludicamente.Ludicamente.service.Ni√±oService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class Ni√±oServiceImpl implements Ni√±oService {

    @Autowired
    private Ni√±oRepository ni√±oRepository;

    @Autowired
    private AcudienteRepository acudienteRepository;

    @Autowired
    private BitacoraRepository bitacoraRepository;

    @Override
    public Ni√±oDto crearNi√±o(Ni√±oDto ni√±oDto) {
        Ni√±o ni√±o = convertirADominio(ni√±oDto);
        Ni√±o ni√±oGuardado = ni√±oRepository.save(ni√±o);
        return convertirADto(ni√±oGuardado);
    }

    @Override
    public List<Ni√±oDto> listarNi√±osPorAcudiente(Integer idAcudiente) {
        List<Ni√±o> ni√±os = ni√±oRepository.findByAcudienteIdAcudiente(idAcudiente);
        return ni√±os.stream()
                .map(this::convertirADto)
                .collect(Collectors.toList());
    }

    @Override
    public List<Ni√±oDto> listarTodosLosNi√±os() {
        System.out.println(">>> LISTANDO TODOS LOS NI√ëOS (admin/empleado)");
        List<Ni√±o> ni√±os = ni√±oRepository.findAll();
        System.out.println("NI√ëOS ENCONTRADOS (ADMIN/EMPLEADO): " + ni√±os.size());
        return ni√±os.stream().map(this::convertirADto).collect(Collectors.toList());
    }

    @Override
    public List<Ni√±oDto> listarNi√±osPorCorreoAcudiente(String correoAcudiente) {
        Optional<Acudiente> acudienteOpt = acudienteRepository.findByCorreo(correoAcudiente);
        if (acudienteOpt.isEmpty()) {
            return List.of(); // o lanzar excepci√≥n
        }
        Acudiente acudiente = acudienteOpt.get();
        List<Ni√±o> ni√±os = ni√±oRepository.findByAcudienteIdAcudiente(acudiente.getIdAcudiente());
        return ni√±os.stream()
                .map(this::convertirADto)
                .collect(Collectors.toList());
    }

    @Override
    public Optional<Ni√±oDto> actualizarNi√±o(Integer id, Ni√±oDto ni√±oDto) {
        Optional<Ni√±o> ni√±oExistente = ni√±oRepository.findById(id);

        if (ni√±oExistente.isPresent()) {
            Ni√±o ni√±o = ni√±oExistente.get();
            ni√±o.setNombre(ni√±oDto.getNombre());
            ni√±o.setnIdentificacion(ni√±oDto.getnIdentificacion());
            ni√±o.setSexo(ni√±oDto.getSexo());
            ni√±o.setFechaNacimiento(ni√±oDto.getFechaNacimiento());
            ni√±o.setFoto(ni√±oDto.getFoto());

            if (ni√±oDto.getIdAcudiente() != null) {
                acudienteRepository.findById(ni√±oDto.getIdAcudiente())
                        .ifPresent(ni√±o::setAcudiente);
            }

            Ni√±o actualizado = ni√±oRepository.save(ni√±o);
            return Optional.of(convertirADto(actualizado));
        }
        return Optional.empty();
    }

    @Override
    public boolean eliminarNi√±o(Integer id) {
        if (ni√±oRepository.existsById(id)) {
            ni√±oRepository.deleteById(id);
            return true;
        }
        return false;
    }

    // ‚úÖ M√©todo para calcular la edad desde la fecha de nacimiento
    private int calcularEdad(Date fechaNacimiento) {
        LocalDate fecha = fechaNacimiento.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        return Period.between(fecha, LocalDate.now()).getYears();
    }

    // ‚úÖ Convertir entidad Ni√±o a DTO, calculando edad autom√°ticamente
    private Ni√±oDto convertirADto(Ni√±o ni√±o) {
        Integer idAcudiente = null;
        String nombreAcudiente = null;
        String parentescoAcudiente = null;
        String telefonoAcudiente = null;

        if (ni√±o.getAcudiente() != null) {
            idAcudiente = ni√±o.getAcudiente().getIdAcudiente();
            nombreAcudiente = ni√±o.getAcudiente().getNombre();
            parentescoAcudiente = ni√±o.getAcudiente().getParentesco();
            telefonoAcudiente = ni√±o.getAcudiente().getTelefono();
        }

        int edadCalculada = calcularEdad(ni√±o.getFechaNacimiento());

        Ni√±oDto dto = new Ni√±oDto(
                ni√±o.getIdNi√±o(),
                ni√±o.getNombre(),
                ni√±o.getnIdentificacion(),
                ni√±o.getSexo(),
                ni√±o.getFechaNacimiento(),
                edadCalculada, // üëà Edad calculada aqu√≠
                ni√±o.getFoto(),
                idAcudiente
        );

        dto.setNombreAcudiente(nombreAcudiente);
        dto.setParentescoAcudiente(parentescoAcudiente);
        dto.setTelefonoAcudiente(telefonoAcudiente);

        List<Bitacora> bitacorasActivas = bitacoraRepository.findByNi√±oAndEstadoTrue(ni√±o);
        dto.setBitacoraActiva(!bitacorasActivas.isEmpty());

        return dto;
    }

    // ‚úÖ Convertir DTO a entidad Ni√±o, sin establecer edad manualmente
    private Ni√±o convertirADominio(Ni√±oDto dto) {
        Ni√±o ni√±o = new Ni√±o();
        ni√±o.setIdNi√±o(dto.getIdNi√±o());
        ni√±o.setNombre(dto.getNombre());
        ni√±o.setnIdentificacion(dto.getnIdentificacion());
        ni√±o.setSexo(dto.getSexo());
        ni√±o.setFechaNacimiento(dto.getFechaNacimiento());
        ni√±o.setFoto(dto.getFoto());

        // ‚ùå No se establece la edad manualmente

        if (dto.getIdAcudiente() != null) {
            Optional<Acudiente> acudienteOpt = acudienteRepository.findById(dto.getIdAcudiente());
            acudienteOpt.ifPresent(ni√±o::setAcudiente);
        }

        return ni√±o;
    }
}
