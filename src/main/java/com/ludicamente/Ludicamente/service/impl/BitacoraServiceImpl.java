package com.ludicamente.Ludicamente.service.impl;

import com.ludicamente.Ludicamente.dto.BitacoraDto;
import com.ludicamente.Ludicamente.mapper.BitacoraMapper;
import com.ludicamente.Ludicamente.model.Bitacora;
import com.ludicamente.Ludicamente.model.Ni√±o;
import com.ludicamente.Ludicamente.repository.BitacoraRepository;
import com.ludicamente.Ludicamente.repository.EmpleadoRepository;
import com.ludicamente.Ludicamente.repository.Ni√±oRepository;
import com.ludicamente.Ludicamente.service.BitacoraService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class BitacoraServiceImpl implements BitacoraService {

    private final BitacoraRepository bitacoraRepository;

    @Autowired
    private Ni√±oRepository ni√±oRepository;

    @Autowired
    private EmpleadoRepository empleadoRepository;

    @Autowired
    public BitacoraServiceImpl(BitacoraRepository bitacoraRepository) {
        this.bitacoraRepository = bitacoraRepository;
    }

    @Override
    public Bitacora crearBitacoraDesdeDto(BitacoraDto dto) {

        Bitacora bitacora = BitacoraMapper.toEntity(dto);

        // Validar existencia del ni√±o
        Ni√±o ni√±o = ni√±oRepository.findById(dto.getIdNi√±o())
                .orElseThrow(() -> new IllegalArgumentException("Ni√±o con ID " + dto.getIdNi√±o() + " no existe."));

        // Validar existencia del empleado (opcional)
        if (dto.getIdEmpleado() != null) {
            bitacora.setEmpleado(
                    empleadoRepository.findById(dto.getIdEmpleado())
                            .orElseThrow(() -> new IllegalArgumentException("Empleado con ID " + dto.getIdEmpleado() + " no existe."))
            );
        }

        // Asociar ni√±o
        bitacora.setNi√±o(ni√±o);

        // ‚úÖ Asignar textos por defecto para los campos de contenido
        bitacora.setDescripcionGeneral("Aqu√≠ va la descripci√≥n general del peque√±o genio.");
        bitacora.setOportunidades("Aqu√≠ van las oportunidades del peque√±o genio.");
        bitacora.setDebilidades("Aqu√≠ van las debilidades del peque√±o genio.");
        bitacora.setFortalezas("Aqu√≠ van las fortalezas del peque√±o genio.");
        bitacora.setAmenazas("Aqu√≠ van las amenazas del peque√±o genio.");
        bitacora.setObjetivos("Aqu√≠ van los objetivos del peque√±o genio.");
        bitacora.setHabilidades("Aqu√≠ van las habilidades del peque√±o genio.");
        bitacora.setSeguimiento("Aqu√≠ va el seguimiento del peque√±o genio.");

        return bitacoraRepository.save(bitacora);
    }

    @Override
    public List<BitacoraDto> obtenerHistorialPorNi√±o(Integer idNi√±o) {
        Ni√±o ni√±o = ni√±oRepository.findById(idNi√±o)
                .orElseThrow(() -> new IllegalArgumentException("Ni√±o con ID " + idNi√±o + " no existe."));

        List<Bitacora> bitacoras = bitacoraRepository.findByNi√±o(ni√±o); // sin filtrar por estado

        return bitacoras.stream()
                .map(BitacoraMapper::toDto)
                .collect(Collectors.toList());
    }



    @Override
    public Optional<Bitacora> findByNi√±oAndCodBitacora(Integer idNi√±o, Integer codBitacora) {
        Optional<Ni√±o> ni√±oOpt = ni√±oRepository.findById(idNi√±o);
        if (ni√±oOpt.isEmpty()) {
            return Optional.empty();
        }
        return bitacoraRepository.findByNi√±oAndCodBitacora(ni√±oOpt.get(), codBitacora);
    }



    @Override
    public List<Bitacora> listarBitacoras() {
        return bitacoraRepository.findAll();
    }

    @Override
    public List<Bitacora> findByNi√±oAndEstadoTrue(Integer idNi√±o) {
        Optional<Ni√±o> ni√±oOptional = ni√±oRepository.findById(idNi√±o);
        if (ni√±oOptional.isPresent()) {
            return bitacoraRepository.findByNi√±oAndEstadoTrue(ni√±oOptional.get());
        } else {
            return Collections.emptyList(); // o lanzar excepci√≥n si prefieres
        }
    }



    @Override
    public Optional<Bitacora> actualizarBitacora(Integer idBitacora, Bitacora bitacoraActualizada) {
        Optional<Bitacora> bitacoraExistenteOpt = bitacoraRepository.findById(idBitacora);

        if (bitacoraExistenteOpt.isEmpty()) return Optional.empty();

        Bitacora existente = bitacoraExistenteOpt.get();

        // Validaciones de integridad
        if (bitacoraActualizada.getNi√±o() != null &&
                !bitacoraActualizada.getNi√±o().getIdNi√±o().equals(existente.getNi√±o().getIdNi√±o())) {
            throw new IllegalArgumentException("No se puede cambiar el ni√±o asociado a esta bit√°cora.");
        }

        if (bitacoraActualizada.getEmpleado() != null &&
                !bitacoraActualizada.getEmpleado().getIdEmpleado().equals(existente.getEmpleado().getIdEmpleado())) {
            throw new IllegalArgumentException("No se puede cambiar el empleado asociado a esta bit√°cora.");
        }

        if (bitacoraActualizada.getTitulo() != null) {
            existente.setTitulo(bitacoraActualizada.getTitulo());
        }

        if (bitacoraActualizada.getEstado() != null) {
            existente.setEstado(bitacoraActualizada.getEstado());
        }

        if (bitacoraActualizada.getDescripcionGeneral() != null) {
            existente.setDescripcionGeneral(bitacoraActualizada.getDescripcionGeneral());
        }

        if (bitacoraActualizada.getOportunidades() != null) {
            existente.setOportunidades(bitacoraActualizada.getOportunidades());
        }

        if (bitacoraActualizada.getDebilidades() != null) {
            existente.setDebilidades(bitacoraActualizada.getDebilidades());
        }

        if (bitacoraActualizada.getAmenazas() != null) {
            existente.setAmenazas(bitacoraActualizada.getAmenazas());
        }

        if (bitacoraActualizada.getFortalezas() != null) {
            existente.setFortalezas(bitacoraActualizada.getFortalezas());
        }

        if (bitacoraActualizada.getObjetivos() != null) {
            existente.setObjetivos(bitacoraActualizada.getObjetivos());
        }

        if (bitacoraActualizada.getHabilidades() != null) {
            existente.setHabilidades(bitacoraActualizada.getHabilidades());
        }

        if (bitacoraActualizada.getSeguimiento() != null) {
            existente.setSeguimiento(bitacoraActualizada.getSeguimiento());
        }

        if (bitacoraActualizada.getHistorialActividad() != null) {
            existente.setHistorialActividad(bitacoraActualizada.getHistorialActividad());
        }

        return Optional.of(bitacoraRepository.save(existente));
    }

    @Override
    public void guardarTodas(List<Bitacora> bitacoras) {
        bitacoraRepository.saveAll(bitacoras);
    }

    @Override
    public void activarTodasPorNi√±o(Integer idNi√±o) {
        Optional<Ni√±o> ni√±oOpt = ni√±oRepository.findById(idNi√±o.intValue()); // o idNi√±o si es Integer
        if (ni√±oOpt.isEmpty()) {
            throw new IllegalArgumentException("Ni√±o con ID " + idNi√±o + " no existe.");
        }

        List<Bitacora> bitacoras = bitacoraRepository.findByNi√±o(ni√±oOpt.get());
        for (Bitacora bitacora : bitacoras) {
            bitacora.setEstado(true);
        }
        bitacoraRepository.saveAll(bitacoras);
    }



    @Override
    public Optional<Bitacora> archivarBitacora(Integer idBitacora) {
        Optional<Bitacora> bitacoraOpt = bitacoraRepository.findById(idBitacora);

        if (bitacoraOpt.isEmpty()) return Optional.empty();

        Bitacora bitacora = bitacoraOpt.get();

        Ni√±o ni√±oAsociado = bitacora.getNi√±o();
        if (ni√±oAsociado == null) return Optional.empty();

        // üîÑ Buscar todas las bit√°coras activas del mismo ni√±o
        List<Bitacora> activasDelNi√±o = bitacoraRepository.findByNi√±oAndEstadoTrue(ni√±oAsociado);

        // ‚ùå Marcar todas como inactivas
        for (Bitacora b : activasDelNi√±o) {
            b.setEstado(false);
        }

        // üíæ Guardar todas las bit√°coras actualizadas
        bitacoraRepository.saveAll(activasDelNi√±o);

        return Optional.of(bitacora);
    }







}